{"version":3,"file":"static/js/51.7fd945cc.chunk.js","mappings":"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","sources":["components/Game.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { io } from 'socket.io-client';\r\n\r\nconst Game = ({ user, onLogout }) => {\r\n  const { roomCode } = useParams();\r\n  const navigate = useNavigate();\r\n  \r\n  const [socket, setSocket] = useState(null);\r\n  const [gameState, setGameState] = useState(null);\r\n  const [playerSymbol, setPlayerSymbol] = useState(null);\r\n  const [message, setMessage] = useState(\"Connecting to the chaos...\");\r\n  const [showGameOver, setShowGameOver] = useState(false);\r\n  const [gameOverMessage, setGameOverMessage] = useState('');\r\n  const [error, setError] = useState('');\r\n  \r\n  // Setup socket connection\r\n  useEffect(() => {\r\n    const newSocket = io();\r\n    setSocket(newSocket);\r\n    \r\n    return () => {\r\n      newSocket.disconnect();\r\n    };\r\n  }, []);\r\n  \r\n  // Handle socket events\r\n  useEffect(() => {\r\n    if (!socket || !user) return;\r\n    \r\n    socket.on('connect', () => {\r\n      socket.emit('join_room', { room_code: roomCode });\r\n    });\r\n    \r\n    socket.on('error', (data) => {\r\n      setError(data.message);\r\n      setMessage(\"Error joined the room\");\r\n      \r\n      // Auto navigate back after error\r\n      setTimeout(() => {\r\n        navigate('/home');\r\n      }, 3000);\r\n    });\r\n    \r\n    socket.on('room_joined', (data) => {\r\n      setGameState(data.game_state);\r\n      setPlayerSymbol(data.player_symbol);\r\n      setMessage(`You joined as ${data.player_symbol}. ${data.game_state.status === 'waiting' ? 'Waiting for opponent...' : `${data.game_state.current_turn}'s turn!`}`);\r\n    });\r\n    \r\n    socket.on('player_joined', (data) => {\r\n      setGameState(data.game_state);\r\n      setMessage(`${data.username} joined as ${data.player_symbol}. ${data.player_symbol}'s turn!`);\r\n    });\r\n    \r\n    socket.on('move_made', (data) => {\r\n      setGameState(data.game_state);\r\n      \r\n      const nextPlayer = data.next_turn === playerSymbol ? 'Your' : `${data.game_state.players[data.next_turn].username}'s`;\r\n      setMessage(`${nextPlayer} turn, ${data.next_turn === playerSymbol ? 'asshole' : 'waitin\\' on that dumb fuck'}!`);\r\n      \r\n      // Add shake animation to status message\r\n      const statusElement = document.querySelector('.game-status');\r\n      statusElement.classList.add('shake');\r\n      setTimeout(() => {\r\n        statusElement.classList.remove('shake');\r\n      }, 500);\r\n    });\r\n    \r\n    socket.on('game_over', (data) => {\r\n      setGameState(data.game_state);\r\n      setMessage(data.message);\r\n      setGameOverMessage('Game\\'s over, you chaotic bastards! Thanks for the mess!');\r\n      setShowGameOver(true);\r\n      \r\n      // Hide game over banner after 4 seconds\r\n      setTimeout(() => {\r\n        setShowGameOver(false);\r\n      }, 4000);\r\n    });\r\n    \r\n    socket.on('game_reset', (data) => {\r\n      setGameState(data.game_state);\r\n      setMessage(`Game reset! ${data.game_state.current_turn}'s turn!`);\r\n    });\r\n    \r\n    return () => {\r\n      socket.off('connect');\r\n      socket.off('error');\r\n      socket.off('room_joined');\r\n      socket.off('player_joined');\r\n      socket.off('move_made');\r\n      socket.off('game_over');\r\n      socket.off('game_reset');\r\n    };\r\n  }, [socket, user, playerSymbol, roomCode, navigate]);\r\n  \r\n  const handleCellClick = useCallback((index) => {\r\n    if (!socket || !gameState || !playerSymbol) return;\r\n    \r\n    // Check if it's player's turn and cell is empty\r\n    if (gameState.current_turn !== playerSymbol || gameState.board[index] !== null || gameState.status !== 'playing') {\r\n      return;\r\n    }\r\n    \r\n    socket.emit('make_move', {\r\n      room_code: roomCode,\r\n      cell_index: index,\r\n      player_symbol: playerSymbol\r\n    });\r\n  }, [socket, gameState, playerSymbol, roomCode]);\r\n  \r\n  const handleResetGame = useCallback(() => {\r\n    if (!socket) return;\r\n    \r\n    socket.emit('reset_game', { room_code: roomCode });\r\n  }, [socket, roomCode]);\r\n  \r\n  const handleBackToHome = useCallback(() => {\r\n    navigate('/home');\r\n  }, [navigate]);\r\n  \r\n  // Memoize the board to prevent unnecessary re-renders\r\n  const renderBoard = useMemo(() => {\r\n    if (!gameState) return null;\r\n    \r\n    return (\r\n      <div className=\"game-board\">\r\n        {gameState.board.map((cell, index) => (\r\n          <div \r\n            key={index}\r\n            className={`cell ${cell ? cell.toLowerCase() : ''}`}\r\n            onClick={() => handleCellClick(index)}\r\n          >\r\n            {cell}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }, [gameState, handleCellClick]);\r\n  \r\n  if (error) {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1 className=\"title\">Error</h1>\r\n        <div className=\"error-message\">{error}</div>\r\n        <button className=\"button\" onClick={handleBackToHome}>\r\n          Back to Home\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      {showGameOver && (\r\n        <div className=\"game-over-banner\">\r\n          {gameOverMessage}\r\n        </div>\r\n      )}\r\n      \r\n      <h1 className=\"title\">Tic Tac Toe Shitshow</h1>\r\n      \r\n      <div className=\"room-code\">\r\n        Room: {roomCode}\r\n      </div>\r\n      \r\n      <div className={`game-status ${message.includes('turn') ? 'shake' : ''}`}>\r\n        {message}\r\n      </div>\r\n      \r\n      {renderBoard}\r\n      \r\n      <div style={{ display: 'flex', gap: '10px', marginTop: '20px' }}>\r\n        <button \r\n          className=\"button\" \r\n          onClick={handleResetGame}\r\n          disabled={!gameState || (gameState.status !== 'winner' && gameState.status !== 'tie')}\r\n        >\r\n          Reset Game\r\n        </button>\r\n        \r\n        <button className=\"button purple\" onClick={handleBackToHome}>\r\n          Back to Home\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Game); "],"names":["Game","_ref","user","onLogout","roomCode","useParams","navigate","useNavigate","socket","setSocket","useState","gameState","setGameState","playerSymbol","setPlayerSymbol","message","setMessage","showGameOver","setShowGameOver","gameOverMessage","setGameOverMessage","error","setError","useEffect","newSocket","io","disconnect","on","emit","room_code","data","setTimeout","game_state","player_symbol","status","current_turn","username","nextPlayer","next_turn","players","statusElement","document","querySelector","classList","add","remove","off","handleCellClick","useCallback","index","board","cell_index","handleResetGame","handleBackToHome","renderBoard","useMemo","_jsx","className","children","map","cell","toLowerCase","onClick","_jsxs","includes","style","display","gap","marginTop","disabled","React"],"sourceRoot":""}