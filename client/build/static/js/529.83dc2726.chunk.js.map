{"version":3,"file":"static/js/529.83dc2726.chunk.js","mappings":"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","sources":["components/AIGame.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { io } from 'socket.io-client';\r\n\r\nconst AIGame = ({ user, onLogout }) => {\r\n  const navigate = useNavigate();\r\n  \r\n  const [socket, setSocket] = useState(null);\r\n  const [gameState, setGameState] = useState(null);\r\n  const [roomCode, setRoomCode] = useState(null);\r\n  const [message, setMessage] = useState(\"Starting AI game...\");\r\n  const [showGameOver, setShowGameOver] = useState(false);\r\n  const [gameOverMessage, setGameOverMessage] = useState('');\r\n  const [error, setError] = useState('');\r\n  \r\n  // Setup socket connection\r\n  useEffect(() => {\r\n    const newSocket = io();\r\n    setSocket(newSocket);\r\n    \r\n    return () => {\r\n      newSocket.disconnect();\r\n    };\r\n  }, []);\r\n  \r\n  // Start AI game on connect\r\n  useEffect(() => {\r\n    if (!socket || !user) return;\r\n    \r\n    socket.on('connect', () => {\r\n      socket.emit('play_vs_ai');\r\n    });\r\n    \r\n    socket.on('error', (data) => {\r\n      setError(data.message);\r\n      \r\n      // Auto navigate back after error\r\n      setTimeout(() => {\r\n        navigate('/home');\r\n      }, 3000);\r\n    });\r\n    \r\n    socket.on('ai_game_started', (data) => {\r\n      setGameState(data.game_state);\r\n      setRoomCode(data.room_code);\r\n      setMessage(data.message);\r\n    });\r\n    \r\n    socket.on('move_made', (data) => {\r\n      setGameState(data.game_state);\r\n      setMessage(\"AI is thinking...\");\r\n    });\r\n    \r\n    socket.on('ai_move_made', (data) => {\r\n      setGameState(data.game_state);\r\n      setMessage(\"Your move, asshole!\");\r\n      \r\n      // Add shake animation to status message\r\n      const statusElement = document.querySelector('.game-status');\r\n      if (statusElement) {\r\n        statusElement.classList.add('shake');\r\n        setTimeout(() => {\r\n          statusElement.classList.remove('shake');\r\n        }, 500);\r\n      }\r\n    });\r\n    \r\n    socket.on('game_over', (data) => {\r\n      setGameState(data.game_state);\r\n      setMessage(data.message);\r\n      setGameOverMessage('Game\\'s over, you chaotic bastards! Thanks for the mess!');\r\n      setShowGameOver(true);\r\n      \r\n      // Hide game over banner after 4 seconds\r\n      setTimeout(() => {\r\n        setShowGameOver(false);\r\n      }, 4000);\r\n    });\r\n    \r\n    socket.on('game_reset', (data) => {\r\n      setGameState(data.game_state);\r\n      setMessage(\"Game reset! Your move, asshole!\");\r\n    });\r\n    \r\n    return () => {\r\n      socket.off('connect');\r\n      socket.off('error');\r\n      socket.off('ai_game_started');\r\n      socket.off('move_made');\r\n      socket.off('ai_move_made');\r\n      socket.off('game_over');\r\n      socket.off('game_reset');\r\n    };\r\n  }, [socket, user, navigate]);\r\n  \r\n  const handleCellClick = useCallback((index) => {\r\n    if (!socket || !gameState || !roomCode) return;\r\n    \r\n    // Check if it's player's turn and cell is empty\r\n    if (gameState.current_turn !== 'X' || gameState.board[index] !== null || gameState.status !== 'playing') {\r\n      return;\r\n    }\r\n    \r\n    socket.emit('make_move_vs_ai', {\r\n      room_code: roomCode,\r\n      cell_index: index\r\n    });\r\n  }, [socket, gameState, roomCode]);\r\n  \r\n  const handleResetGame = useCallback(() => {\r\n    if (!socket || !roomCode) return;\r\n    \r\n    socket.emit('reset_game', { room_code: roomCode });\r\n  }, [socket, roomCode]);\r\n  \r\n  const handleBackToHome = useCallback(() => {\r\n    navigate('/home');\r\n  }, [navigate]);\r\n  \r\n  // Memoize the board to prevent unnecessary re-renders\r\n  const renderBoard = useMemo(() => {\r\n    if (!gameState) return null;\r\n    \r\n    return (\r\n      <div className=\"game-board\">\r\n        {gameState.board.map((cell, index) => (\r\n          <div \r\n            key={index}\r\n            className={`cell ${cell ? cell.toLowerCase() : ''}`}\r\n            onClick={() => handleCellClick(index)}\r\n          >\r\n            {cell}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }, [gameState, handleCellClick]);\r\n  \r\n  if (error) {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1 className=\"title\">Error</h1>\r\n        <div className=\"error-message\">{error}</div>\r\n        <button className=\"button\" onClick={handleBackToHome}>\r\n          Back to Home\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      {showGameOver && (\r\n        <div className=\"game-over-banner\">\r\n          {gameOverMessage}\r\n        </div>\r\n      )}\r\n      \r\n      <h1 className=\"title\">Playing vs. AI</h1>\r\n      \r\n      <div className=\"game-status\">\r\n        {message}\r\n      </div>\r\n      \r\n      {renderBoard}\r\n      \r\n      <div style={{ display: 'flex', gap: '10px', marginTop: '20px' }}>\r\n        <button \r\n          className=\"button\" \r\n          onClick={handleResetGame}\r\n          disabled={!gameState || (gameState.status !== 'winner' && gameState.status !== 'tie')}\r\n        >\r\n          Reset Game\r\n        </button>\r\n        \r\n        <button className=\"button purple\" onClick={handleBackToHome}>\r\n          Back to Home\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(AIGame); "],"names":["AIGame","_ref","user","onLogout","navigate","useNavigate","socket","setSocket","useState","gameState","setGameState","roomCode","setRoomCode","message","setMessage","showGameOver","setShowGameOver","gameOverMessage","setGameOverMessage","error","setError","useEffect","newSocket","io","disconnect","on","emit","data","setTimeout","game_state","room_code","statusElement","document","querySelector","classList","add","remove","off","handleCellClick","useCallback","index","current_turn","board","status","cell_index","handleResetGame","handleBackToHome","renderBoard","useMemo","_jsx","className","children","map","cell","toLowerCase","onClick","_jsxs","style","display","gap","marginTop","disabled","React"],"sourceRoot":""}